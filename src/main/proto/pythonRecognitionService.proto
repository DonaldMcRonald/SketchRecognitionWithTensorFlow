package protobuf.srl.services.recognition;

import "commands.proto";
import "sketch.proto";

option java_generic_services = true;
option py_generic_services = true;

message GeneralRecognitionRequest {
    required RecognitionRequestType requestType = 1;
    //oneof Request {
    optional AddUpdateRequest addUpdate = 2;
    optional RecognitionUpdateList setUpdateList = 3;
    optional protobuf.srl.sketch.RecognitionTemplate template = 4;
    //}
    optional string Message = 5;
    repeated string labels = 6;
}

enum RecognitionRequestType {
    ADD_UPDATE = 0;
    SET_NEW_LIST = 1;
    ADD_TEMPLATE = 2;
    RECOGNIZE = 3;
    GENERATE_SHAPES = 4;
    TRAIN = 5;
    TEST = 6;
    INIT = 7;
}

message AddUpdateRequest {
    /**
     * The id of the base sketch the update belongs to.
     *
     * Note that this is the base sketch and not and newer sketch.
     */
    optional string recognitionId = 1;

    /**
     * The update being added.
     */
    optional protobuf.srl.commands.SrlUpdate update = 2;
}

message RecognitionUpdateList {
    /**
     * The id of the base sketch the update belongs to.
     *
     * Note that this is the base sketch and not and newer sketch.
     */
    required string recognitionId = 1;

    /**
     * The update list that is being set.
     */
    optional protobuf.srl.commands.SrlUpdateList updateList = 2;
}

message RecognitionResponse {
    /**
     * This is the list of changes that need to be made as suggested by the recognition server.
     */
    optional protobuf.srl.commands.SrlUpdateList changes = 1;
}

message GeneratedTemplates {
    // These are templates that were generated by the recognition system.
    repeated protobuf.srl.sketch.RecognitionTemplate generatedTemplates = 1;
}

message Noop {

}

/**
 * A service that handles messages to the recogntion server and from the recognition server.
 */
service RecognitionService {

    /**
     * Adds a single update to be recognized.
     */
    rpc addUpdate(AddUpdateRequest) returns (RecognitionResponse);

    /**
     * Inserts the experiment into the submission server.
     */
    rpc createUpdateList(RecognitionUpdateList) returns (RecognitionResponse);

    /**
     * Reconizes the sketch and returns a recognition response.
     */
    rpc recognize(RecognitionUpdateList) returns (RecognitionResponse);

    /**
     * Reconizes the sketch and returns a recognition response.
     */
    rpc test(protobuf.srl.sketch.RecognitionTemplate) returns (protobuf.srl.sketch.RecognitionTemplate);

    /**
     * Creates a list of potential template matches.
     */
    rpc generateTemplates(protobuf.srl.sketch.RecognitionTemplate) returns (GeneratedTemplates);

    /**
     * Creates a list of potential template matches.
     */
    rpc train(protobuf.srl.sketch.RecognitionTemplate) returns (Noop);
}
